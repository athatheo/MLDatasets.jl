function __init__pubmed()
    DEPNAME = "PubMed"
    LINK = "https://github.com/kimiyoung/planetoid/raw/master/data"
    DOCS = "https://github.com/kimiyoung/planetoid"
    DATA = "ind.pubmed." .* ["x", "y", "tx", "allx", "ty", "ally", "graph", "test.index"]

    register(DataDep(
        DEPNAME,
        """
        Dataset: The $DEPNAME dataset.
        Website: $DOCS
        """,
        map(x -> "$LINK/$x", DATA),
        "0b8bf8e80564611b540655e9cbb8c5900dd3728d4ababe0b990b6f27144bd76c",  # if checksum omitted, will be generated by DataDeps
        # post_fetch_method = unpack
    ))
end

"""
    PubMed(; dir=nothing, reverse_edges=true)

The PubMed citation network dataset from Ref. [1].
Nodes represent documents and edges represent citation links.
The dataset is designed for the node classification task. 
The task is to predict the category of certain paper.
The dataset is retrieved from Ref. [2].

# Interface

- [`PubMed.dataset`](@ref)

# References

[1]: [Deep Gaussian Embedding of Graphs: Unsupervised Inductive Learning via Ranking](https://arxiv.org/abs/1707.03815)
[2]: [Planetoid](https://github.com/kimiyoung/planetoid)

# Examples

The output is a named tuple with fields
```julia-repl
julia> keys(PubMed.dataset())
(:node_features, :node_labels, :adjacency_list, :train_indices, :val_indices, :test_indices, :num_classes, :num_nodes, :num_edges, :directed)
```

In particular, `adjacency_list` is a vector of vector, 
where `adjacency_list[i]` will contain the neighbors of node `i`
through outgoing edges.

If `reverse_edges=true`, the graph will contain
the reverse of each edge and the graph will be undirected.

See also [`PubMed`](@ref).

# Usage Examples

```julia
using MLDatasets: PubMed
data = PubMed.dataset()
train_labels = data.node_labels[data.train_indices]
```
"""
struct PubMed <: AbstractDataset
    metadata::Dict{String, Any}
    graphs::Vector{Graph}
end

function PubMed(; dir=nothing, reverse_edges=true)
    metadata, g = read_planetoid_data("PubMed", dir=dir, reverse_edges=reverse_edges)
    return PubMed(metadata, [g])
end

Base.length(d::PubMed) = length(d.graphs) 
Base.getindex(d::PubMed) = d.graphs
Base.getindex(d::PubMed, i) = getindex(d.graphs, i)

